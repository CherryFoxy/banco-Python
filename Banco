import textwrap
from abc import ABC, abstractmethod
from datetime import datetime


class Cliente: #Pai
    #Métodos
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas[]

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta) #Adiciona em um array de contas

class PessoaFísica(Cliente): #Filha/Herda de Cliente, herdou os métodos Realizar Transação e Adicionar Conta
    def __init__ (self, nome, data_nascimento, cpf, endereco):
        super(). __init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf


class Conta: #Pai
    #Métodos
    def __init__(self, saldo, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod #Método da Classe
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)
    
    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        saldo = self.saldo #pegar o saldo
        excedeu_saldo = valor > saldo #Verificar o valor de saldo

        if excedeu_saldo:
            print("SALDO INSUFICIENTE")

        elif valor > 0:
            self._saldo -= valor
            print("SAQUE REALIZADO! RETIRE SU CARTÃO")
            return True
        
        else:
            print("VALOR INFORMADO É INVÁLIDO! TENTE NOVAMENTE")
            
        return False
    
    def depositar(self, valor):
        if valor >0:
            self._saldo += valor
            print("DEPÓSITO REALIZADO")

        else:
            print("OPERAÇÃO FALHOU!")
            return False
        
        return True
        

class ContaCorrente(Conta): #Filha/Herda de Conta
    def __init__(self, saldo, numero, cliente, limite = 500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao['tipo'] = Saque. __name__]
        )   

        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques > self.limite_saques

        if excedeu_limite:
            print("OPERAÇÃO FALHOU! O VALOR EXCEDEU O NÚMERO DE SAQUES.")

        else:
            return super().sacar(valor)
        
        return False
    
    def __str__ (self):
        return f"""\
            Agência:\t{self.agencia}
            C/C:|\t\t{self.numero}
            Titular: \t{self.cliente.nome}
        """
    
class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes
    
    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "Tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime #Data atual
                ("%d-%m-%Y %H:%M:%s"),
            }
        )

class Transacao(ABC):
    @property
    @abstractmethod
    def valor(self, conta):
        pass

    @classmethod
    @abstractmethod
    def registrar(self, conta):
        pass
    

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor
        
    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)



class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

